{"version":3,"file":"static/js/Speakings teacher page.27de28f0.chunk.js","mappings":"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","sources":["pages/Streams/Speakings.jsx"],"sourcesContent":["import axios from 'axios';\nimport { StreamsBackgroundWrapper } from 'components/BackgroundWrapper/BackgroundWrappers';\nimport { Label } from 'components/LeadForm/LeadForm.styled';\nimport { Loader } from 'components/SharedLayout/Loaders/Loader';\nimport { LoaderWrapper } from 'components/SharedLayout/Loaders/Loader.styled';\nimport { Formik } from 'formik';\nimport { useLayoutEffect, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport * as yup from 'yup';\nimport {\n  LoginInput,\n  LoginInputNote,\n  LoginLogo,\n  StreamAuthText,\n  StreamAuthTextHello,\n} from '../../components/Stream/Stream.styled';\nimport { AdminFormBtn, LoginForm } from './AdminPanel/AdminPanel.styled';\n\naxios.defaults.baseURL = 'https://ap-server-8qi1.onrender.com';\n\nconst setAuthToken = token => {\n  axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n};\n\nconst Speakings = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentUser, setCurrentUser] = useState({});\n  const [isUserLogged, setIsUserLogged] = useState(false);\n\n  const wakeupRequest = async () => {\n    try {\n      const wake = await axios.get('/');\n      console.log(wake.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const initialLoginValues = {\n    login: '',\n    password: '',\n  };\n\n  const loginSchema = yup.object().shape({\n    login: yup.string().required('Вкажіть логін!'),\n    password: yup.string().required('Введіть пароль!'),\n  });\n\n  const handleLoginSubmit = async (values, { resetForm }) => {\n    values.login = values.login.toLowerCase().trim().trimStart();\n    values.password = values.password.trim().trimStart();\n    try {\n      const response = await axios.post('/teachers/login', values);\n      setAuthToken(response.data.token);\n      setIsUserLogged(isLogged => (isLogged = true));\n      setCurrentUser(currentUser => (currentUser = response.data.teacher));\n      localStorage.setItem('teacherLogin', values.login);\n      resetForm();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useLayoutEffect(() => {\n    wakeupRequest();\n\n    const refreshToken = async () => {\n      console.log('token refresher');\n      if (localStorage.getItem('teacherLogin')) {\n        try {\n          setIsLoading(true);\n          const res = await axios.post('/teachers/refresh', {\n            login: localStorage.getItem('teacherLogin'),\n          });\n\n          setAuthToken(res.data.token);\n          setCurrentUser(currentUser => (currentUser = res.data.teacher));\n          setIsUserLogged(isLogged => (isLogged = true));\n        } catch (error) {\n          console.log(error);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n    refreshToken();\n  }, []);\n\n  return (\n    <>\n      <StreamsBackgroundWrapper>\n        {!isUserLogged ? (\n          <Formik\n            initialValues={initialLoginValues}\n            onSubmit={handleLoginSubmit}\n            validationSchema={loginSchema}\n          >\n            <LoginForm>\n              <LoginLogo />\n              <StreamAuthText>\n                <StreamAuthTextHello>Привіт!</StreamAuthTextHello>\n                Це сторінка для викладачів. <br />\n                Якщо ви викладач, введіть ваші логін та пароль.\n              </StreamAuthText>\n              <Label>\n                <LoginInput type=\"text\" name=\"login\" placeholder=\"Login\" />\n                <LoginInputNote component=\"p\" name=\"login\" />\n              </Label>\n              <Label>\n                <LoginInput\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                />\n                <LoginInputNote component=\"p\" name=\"password\" />\n              </Label>\n              <AdminFormBtn type=\"submit\">Увійти</AdminFormBtn>\n            </LoginForm>\n          </Formik>\n        ) : (\n          <Outlet context={[currentUser]} />\n        )}\n\n        {isLoading && (\n          <LoaderWrapper>\n            <Loader />\n          </LoaderWrapper>\n        )}\n      </StreamsBackgroundWrapper>\n    </>\n  );\n};\n\nexport default Speakings;\n"],"names":["axios","setAuthToken","token","concat","Speakings","isLoading","setIsLoading","useState","currentUser","setCurrentUser","isUserLogged","setIsUserLogged","loginSchema","yup","shape","login","required","password","useLayoutEffect","async","wake","console","log","data","error","wakeupRequest","localStorage","getItem","res","teacher","isLogged","refreshToken","_jsx","_Fragment","children","_jsxs","StreamsBackgroundWrapper","Outlet","context","Formik","initialValues","onSubmit","values","_ref","resetForm","toLowerCase","trim","trimStart","response","setItem","validationSchema","LoginForm","LoginLogo","StreamAuthText","StreamAuthTextHello","Label","LoginInput","type","name","placeholder","LoginInputNote","component","AdminFormBtn","LoaderWrapper","Loader"],"sourceRoot":""}