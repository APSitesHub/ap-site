{"version":3,"file":"static/js/Streams A1 page.58d257cd.chunk.js","mappings":"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","sources":["components/Stream/StudentInput/StudentInput.styled.js","components/Stream/StudentInput/StudentInput.jsx","pages/Streams/A1/StreamA1.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StudentInputBox = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  /* transform: translate(-50%, -50%); */\n  overflow: hidden;\n  height: 80px;\n  width: 200px;\n  background-color: wheat;\n  z-index: 15;\n\n  &.hidden {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  &.shown {\n    opacity: 1;\n  }\n`;\n","import { StudentInputBox } from './StudentInput.styled';\n\nexport const StudentInput = ({ isInputOpen }) => {\n//   const handleOnDrag = e => {\n//     var pos1 = 0,\n//       pos2 = 0,\n//       pos3 = 0,\n//       pos4 = 0;\n//     if (document.getElementById('mydivheader')) {\n//       /* if present, the header is where you move the DIV from:*/\n//       document.getElementById('mydivheader').onmousedown = dragMouseDown;\n//     } else {\n//       /* otherwise, move the DIV from anywhere inside the DIV:*/\n//       e.target.onmousedown = dragMouseDown;\n//     }\n\n//     function dragMouseDown(e) {\n//       e = e || window.event;\n//       e.preventDefault();\n//       // get the mouse cursor position at startup:\n//       pos3 = e.clientX;\n//       pos4 = e.clientY;\n//       document.onmouseup = closeDragElement;\n//       // call a function whenever the cursor moves:\n//       document.onmousemove = elementDrag;\n//     }\n\n//     function elementDrag(e) {\n//       e = e || window.event;\n//       e.preventDefault();\n//       // calculate the new cursor position:\n//       pos1 = pos3 - e.clientX;\n//       pos2 = pos4 - e.clientY;\n//       pos3 = e.clientX;\n//       pos4 = e.clientY;\n//       // set the element's new position:\n//       e.target.style.top = e.target.offsetTop - pos2 + 'px';\n//       e.target.style.left = e.target.offsetLeft - pos1 + 'px';\n//     }\n\n//     function closeDragElement() {\n//       /* stop moving when mouse button is released:*/\n//       document.onmouseup = null;\n//       document.onmousemove = null;\n//     }\n//   };\n\n  return (\n    <StudentInputBox\n      className={isInputOpen ? 'shown' : 'hidden'}\n    //   draggable={true}\n    //   onDrag={handleOnDrag}\n    //   onTouchMove={handleOnDrag}\n    >\n      <div id=\"mydivheader\">Click here to move</div>\n      <input type=\"text\" />\n    </StudentInputBox>\n  );\n};\n","import useSize from '@react-hook/size';\nimport axios from 'axios';\nimport { Kahoots } from 'components/Stream/Kahoots/Kahoots';\nimport { Support } from 'components/Stream/Support/Support';\nimport { useEffect, useRef, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { useOutletContext } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { Chat } from 'utils/Chat/Chat';\nimport {\n  BoxHideLeftSwitch,\n  BoxHideRightSwitch,\n  BoxHideSwitch,\n  ButtonBox,\n  ChatBox,\n  ChatBtn,\n  ChatLogo,\n  KahootBtn,\n  KahootLogo,\n  MoldingNoClick,\n  MoldingNoClickSecondary,\n  StreamPlaceHolder,\n  StreamPlaceHolderText,\n  StreamSection,\n  SupportArrow,\n  SupportBtn,\n  SupportLogo,\n  SupportMarkerLeft,\n  SupportMarkerRight,\n  SupportPointer,\n  VideoBox,\n} from '../../../components/Stream/Stream.styled';\nimport { StudentInput } from 'components/Stream/StudentInput/StudentInput';\n\nconst StreamA1 = () => {\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [isKahootOpen, setIsKahootOpen] = useState(false);\n  const [isSupportOpen, setIsSupportOpen] = useState(false);\n  const [isInputOpen, setIsInputOpen] = useState(false);\n  const [isButtonBoxOpen, setIsButtonBoxOpen] = useState(true);\n  const [isOpenedLast, setIsOpenedLast] = useState('');\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [animatedID, setAnimationID] = useState('');\n  const [links, isLoading, currentUser, room] = useOutletContext();\n  const chatEl = useRef();\n  // eslint-disable-next-line\n  const [chatWidth, chatHeight] = useSize(chatEl);\n  const [width, height] = useSize(document.body);\n  const [isBanned, setIsBanned] = useState(false);\n  const [messages, setMessages] = useState([]);\n\n  const toggleKahoot = e => {\n    setIsKahootOpen(isKahootOpen => !isKahootOpen);\n    isChatOpen || isSupportOpen || isInputOpen\n      ? setIsOpenedLast(isOpenedLast => 'kahoot')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const toggleChat = () => {\n    setIsChatOpen(isChatOpen => !isChatOpen);\n    isKahootOpen || isSupportOpen || isInputOpen\n      ? setIsOpenedLast(isOpenedLast => 'chat')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const toggleSupport = () => {\n    setIsSupportOpen(isSupportOpen => !isSupportOpen);\n    setAnimationID('');\n    isKahootOpen || isChatOpen || isInputOpen\n      ? setIsOpenedLast(isOpenedLast => 'support')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const toggleInput = () => {\n    setIsInputOpen(isInputOpen => !isInputOpen);\n    setAnimationID('');\n    isKahootOpen || isChatOpen || isSupportOpen\n      ? setIsOpenedLast(isOpenedLast => 'input')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const toggleButtonBox = () => {\n    setIsButtonBoxOpen(isOpen => !isOpen);\n  };\n  const handleSupportClick = data_id => {\n    setAnimationID(id => (id = data_id));\n    if (!isAnimated) {\n      setIsAnimated(isAnimated => !isAnimated);\n    }\n  };\n\n  const videoBoxWidth =\n    chatWidth === 0 && width > height ? width - 300 : width - chatWidth;\n\n  const socketRef = useRef(null);\n\n  useEffect(() => {\n    document.title = 'A1 English | AP Education';\n\n    socketRef.current = io('https://ap-chat-server.onrender.com/');\n    // socketRef.current = io('http://localhost:4000/');\n\n    socketRef.current.on('connected', (connected, handshake) => {\n      console.log(connected);\n      console.log(handshake.time);\n      socketRef.current.emit('connected:user', socketRef.current.id, room);\n    });\n\n    socketRef.current.on('question:input', howdy => {\n      console.log(howdy);\n      console.log(room);\n      setIsInputOpen(true);\n    });\n\n    socketRef.current.on('connected:user', (id, lvl) => {\n      console.log(id);\n      console.log(lvl);\n    });\n\n    const getMessages = async () => {\n      console.log('get');\n      try {\n        const dbMessages = await axios.get(\n          `https://ap-chat-server.onrender.com/messages/room`,\n          {\n            params: {\n              room,\n            },\n          }\n        );\n        const todayMessages = dbMessages.data.filter(\n          message => new Date(message.createdAt).getDate() === new Date().getDate()\n        );\n        setMessages(messages => (messages = todayMessages));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMessages();\n\n    socketRef.current.on('message', async data => {\n      setMessages(messages => (messages = [...messages, data]));\n      const updateMessages = async () => {\n        try {\n          await axios.post('https://ap-chat-server.onrender.com/messages', data);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      await updateMessages();\n    });\n\n    socketRef.current.on('message:get', async data => {\n      setMessages(messages => (messages = [...messages, data]));\n    });\n\n    socketRef.current.on('message:pinned', async (id, data) => {\n      console.log(id);\n      console.log(data);\n      setMessages(messages => {\n        messages[messages.findIndex(message => message.id === id)].isPinned =\n          data.isPinned;\n        return [...messages];\n      });\n    });\n\n    socketRef.current.on('message:delete', async id => {\n      console.log('delete fired');\n      setMessages(\n        messages => (messages = [...messages.filter(message => message.id !== id)])\n      );\n      const deleteMessage = async () => {\n        try {\n          await axios.delete(`https://ap-chat-server.onrender.com/messages/${id}`);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      await deleteMessage();\n    });\n\n    socketRef.current.on('message:deleted', async id => {\n      console.log(id);\n      setMessages(\n        messages => (messages = [...messages.filter(message => message.id !== id)])\n      );\n    });\n\n    socketRef.current.on('user:banned', async (userID, userIP) => {\n      console.log(userID);\n      console.log(userIP);\n      if (userID === currentUser.userID) {\n        setIsBanned(true);\n      }\n    });\n\n    return () => {\n      console.log('disconnecting');\n      socketRef.current.emit('connected:disconnect', socketRef.current.id, room);\n      socketRef.current.off('connected');\n      socketRef.current.off('message');\n      socketRef.current.off('user');\n      socketRef.current.disconnect();\n    };\n  }, [currentUser, room]);\n\n  return (\n    <>\n      {(links.a1 === undefined || links.a1[0] < 10) && !isLoading ? (\n        <StreamPlaceHolder>\n          <StreamPlaceHolderText>\n            Привіт! <br />\n            Наразі урок на цій сторінці не проводиться! Перевірте, чи ви перейшли за\n            правильним посиланням або спробуйте пізніше.\n          </StreamPlaceHolderText>\n        </StreamPlaceHolder>\n      ) : currentUser.isBanned || isBanned ? (\n        <StreamPlaceHolder>\n          <StreamPlaceHolderText>\n            Хмммм, схоже що ви були нечемні! <br />\n            Вас було заблоковано за порушення правил нашої платформи. Зв'яжіться зі своїм\n            менеджером сервісу!\n          </StreamPlaceHolderText>\n        </StreamPlaceHolder>\n      ) : (\n        <>\n          <StreamSection\n            style={{\n              width: isChatOpen && width > height ? `${videoBoxWidth}px` : '100%',\n            }}\n          >\n            <VideoBox>\n              <MoldingNoClick />\n              <MoldingNoClickSecondary />\n              <SupportMarkerLeft\n                className={\n                  (isAnimated && animatedID === 'sound') ||\n                  (isAnimated && animatedID === 'live')\n                    ? 'animated'\n                    : ''\n                }\n              >\n                <SupportArrow\n                  className={\n                    (isAnimated && animatedID === 'sound') ||\n                    (isAnimated && animatedID === 'live')\n                      ? 'animated'\n                      : ''\n                  }\n                />\n              </SupportMarkerLeft>\n              <SupportMarkerRight\n                className={isAnimated && animatedID === 'quality' ? 'animated' : ''}\n              >\n                <SupportPointer\n                  className={isAnimated && animatedID === 'quality' ? 'animated' : ''}\n                />\n              </SupportMarkerRight>\n              <ReactPlayer\n                playing={true}\n                muted={true}\n                controls={true}\n                config={{\n                  youtube: {\n                    playerVars: { rel: 0 },\n                  },\n                }}\n                style={{\n                  display: 'block',\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                }}\n                width=\"100%\"\n                height=\"100vh\"\n                url={links.a1}\n              />\n            </VideoBox>\n\n            <ButtonBox className={!isButtonBoxOpen ? 'hidden' : ''}>\n              <KahootBtn\n                onClick={toggleKahoot}\n                className={isAnimated && animatedID === 'kahoot_open' ? 'animated' : ''}\n              >\n                <KahootLogo />\n              </KahootBtn>\n\n              <ChatBtn\n                onClick={toggleChat}\n                className={isAnimated && animatedID === 'chat_open' ? 'animated' : ''}\n              >\n                <ChatLogo />\n              </ChatBtn>\n\n              <SupportBtn onClick={toggleSupport}>\n                <SupportLogo />\n              </SupportBtn>\n            </ButtonBox>\n\n            <BoxHideSwitch id=\"no-transform\" onClick={toggleButtonBox}>\n              {isButtonBoxOpen ? <BoxHideLeftSwitch /> : <BoxHideRightSwitch />}\n            </BoxHideSwitch>\n            {console.log(socketRef.current)}\n            {height > width && (\n              <ChatBox\n                ref={chatEl}\n                className={isChatOpen ? 'shown' : 'hidden'}\n                style={isOpenedLast === 'chat' ? { zIndex: '2' } : { zIndex: '1' }}\n              >\n                <Chat\n                  socket={socketRef.current}\n                  messages={messages}\n                  isChatOpen={isChatOpen}\n                  currentUser={currentUser}\n                />\n              </ChatBox>\n            )}\n\n            <StudentInput isInputOpen={isInputOpen} toggleInput={toggleInput} />\n\n            <Support\n              sectionWidth={width}\n              isSupportOpen={isSupportOpen}\n              isOpenedLast={isOpenedLast}\n              handleSupport={handleSupportClick}\n              openKahoot={toggleKahoot}\n              isKahootOpen={isKahootOpen}\n            />\n\n            <Kahoots\n              sectionWidth={width}\n              sectionHeight={height}\n              isKahootOpen={isKahootOpen}\n              isChatOpen={isChatOpen}\n              isOpenedLast={isOpenedLast}\n            />\n          </StreamSection>\n          {width >= height && (\n            <ChatBox\n              ref={chatEl}\n              className={isChatOpen ? 'shown' : 'hidden'}\n              style={isOpenedLast === 'chat' ? { zIndex: '2' } : { zIndex: '1' }}\n            >\n              <Chat\n                socket={socketRef.current}\n                messages={messages}\n                isChatOpen={isChatOpen}\n                currentUser={currentUser}\n              />\n            </ChatBox>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default StreamA1;\n"],"names":["StudentInputBox","styled","_templateObject","_taggedTemplateLiteral","StudentInput","_ref","isInputOpen","_jsxs","className","children","_jsx","id","type","StreamA1","isChatOpen","setIsChatOpen","useState","isKahootOpen","setIsKahootOpen","isSupportOpen","setIsSupportOpen","setIsInputOpen","isButtonBoxOpen","setIsButtonBoxOpen","isOpenedLast","setIsOpenedLast","isAnimated","setIsAnimated","animatedID","setAnimationID","links","isLoading","currentUser","room","useOutletContext","chatEl","useRef","chatWidth","chatHeight","useSize","width","height","document","body","isBanned","setIsBanned","messages","setMessages","toggleKahoot","e","videoBoxWidth","socketRef","useEffect","title","current","io","on","connected","handshake","console","log","time","emit","howdy","lvl","async","todayMessages","axios","params","data","filter","message","Date","createdAt","getDate","error","getMessages","updateMessages","findIndex","isPinned","concat","deleteMessage","userID","userIP","off","disconnect","_Fragment","undefined","a1","StreamPlaceHolder","StreamPlaceHolderText","StreamSection","style","VideoBox","MoldingNoClick","MoldingNoClickSecondary","SupportMarkerLeft","SupportArrow","SupportMarkerRight","SupportPointer","ReactPlayer","playing","muted","controls","config","youtube","playerVars","rel","display","position","top","left","url","ButtonBox","KahootBtn","onClick","KahootLogo","ChatBtn","toggleChat","ChatLogo","SupportBtn","toggleSupport","SupportLogo","BoxHideSwitch","toggleButtonBox","isOpen","BoxHideLeftSwitch","BoxHideRightSwitch","ChatBox","ref","zIndex","Chat","socket","toggleInput","Support","sectionWidth","handleSupport","data_id","openKahoot","Kahoots","sectionHeight"],"sourceRoot":""}