{"version":3,"file":"static/js/Videochat Room.b7588569.chunk.js","mappings":"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","sources":["pages/Videochat/utils/hooks/useStateWithCallback.js","pages/Videochat/utils/hooks/useWebRTC.js","pages/Videochat/Videochat.styled.js","pages/Videochat/VideochatRoom.jsx","pages/Videochat/utils/socket/actions.js","pages/Videochat/utils/socket/index.js","../node_modules/freeice/index.js","../node_modules/normalice/index.js"],"sourcesContent":["import {useState, useCallback, useRef, useEffect} from 'react';\n\nconst useStateWithCallback = initialState => {\n  const [state, setState] = useState(initialState);\n  const cbRef = useRef(null);\n\n  const updateState = useCallback((newState, cb) => {\n    cbRef.current = cb;\n\n    setState(prev => typeof newState === 'function' ? newState(prev) : newState);\n  }, []);\n\n  useEffect(() => {\n    if (cbRef.current) {\n      cbRef.current(state);\n      cbRef.current = null;\n    }\n  }, [state]);\n\n  return [state, updateState];\n}\n\nexport default useStateWithCallback;","import { useEffect, useRef, useCallback, useState } from 'react';\nimport freeice from 'freeice';\nimport useStateWithCallback from './useStateWithCallback';\nimport socket from '../socket';\nimport ACTIONS from '../socket/actions';\n\nexport const LOCAL_VIDEO = 'LOCAL_VIDEO';\n\nexport default function useWebRTC(roomID) {\n  const [clients, updateClients] = useStateWithCallback([]);\n  const [isLocalCameraEnabled, setLocalCameraEnabled] = useState(true);\n  const [isLocalMicrophoneEnabled, setLocalMicrophoneEnabled] = useState(true);\n\n  const determineRole = useCallback((newClient) => {\n    // TODO: implement a normal role determination\n    return newClient === LOCAL_VIDEO ? 'admin' : 'user';\n  }, []);\n\n  const addNewClient = useCallback(\n    (newClient, cb) => {\n      updateClients(list => {\n        const exists = list.some(client => client.clientId === newClient);\n        if (!exists) {\n          const role = determineRole(newClient);\n          return [\n            ...list,\n            {\n              clientId: newClient,\n              role,\n              isMicroEnabled: true,\n              isCameraEnabled: true,\n            },\n          ];\n        }\n        return list;\n      }, cb);\n    },\n    [updateClients, determineRole]\n  );\n\n  const peerConnections = useRef({});\n  const localMediaStream = useRef(null);\n  const peerMediaElements = useRef({\n    [LOCAL_VIDEO]: null,\n  });\n\n  const toggleCamera = () => {\n    if (localMediaStream.current) {\n      const videoTrack = localMediaStream.current\n        .getTracks()\n        .find(track => track.kind === 'video');\n\n      if (videoTrack) {\n        videoTrack.enabled = !videoTrack.enabled;\n\n        Object.entries(peerConnections.current).forEach(([id, targetObj]) => {\n          const vt = targetObj.getSenders().find(sender => sender.track.kind === 'video');\n          vt.track.enabled = videoTrack.enabled;\n        });\n\n        setLocalCameraEnabled(videoTrack.enabled);\n        const localVideoElement = peerMediaElements.current[LOCAL_VIDEO];\n\n        if (videoTrack.enabled) {\n          localVideoElement.srcObject = localMediaStream.current;\n        } else {\n          localVideoElement.srcObject = null;\n        }\n\n        socket.emit(ACTIONS.TOGGLE_CAMERA, {\n          isCameraEnabled: videoTrack.enabled,\n        });\n      }\n    }\n  };\n\n  const toggleMicrophone = () => {\n    if (localMediaStream.current) {\n      const audioTrack = localMediaStream.current\n        .getTracks()\n        .find(track => track.kind === 'audio');\n\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n\n        Object.entries(peerConnections.current).forEach(([id, targetObj]) => {\n          const at = targetObj.getSenders().find(sender => sender.track.kind === 'audio');\n          at.track.enabled = audioTrack.enabled;\n        });\n\n        setLocalMicrophoneEnabled(audioTrack.enabled);\n        socket.emit(ACTIONS.TOGGLE_MICRO, {\n          isMicroEnabled: audioTrack.enabled,\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    async function handleNewPeer({ peerID, createOffer }) {\n      if (peerConnections.current[peerID]) {\n        return console.warn(`Already connected to peer ${peerID}`);\n      }\n\n      const peerConnection = new RTCPeerConnection({\n        iceServers: freeice(),\n      });\n\n      peerConnections.current[peerID] = peerConnection;\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(ACTIONS.RELAY_ICE, {\n            peerID,\n            iceCandidate: event.candidate,\n          });\n        }\n      };\n\n      let tracksNumber = 0;\n\n      peerConnection.ontrack = ({ streams: [remoteStream] }) => {\n        tracksNumber++;\n\n        if (tracksNumber === 2) {\n          addNewClient(peerID, () => {\n            if (peerMediaElements.current[peerID]) {\n              peerMediaElements.current[peerID].srcObject = remoteStream;\n            }\n          });\n        }\n      };\n\n      if (localMediaStream.current) {\n        localMediaStream.current.getTracks().forEach(track => {\n          peerConnection.addTrack(track, localMediaStream.current);\n        });\n      }\n\n      if (createOffer) {\n        const offer = await peerConnection.createOffer();\n        await peerConnection.setLocalDescription(offer);\n\n        socket.emit(ACTIONS.RELAY_SDP, {\n          peerID,\n          sessionDescription: offer,\n        });\n      }\n    }\n\n    socket.on(ACTIONS.ADD_PEER, handleNewPeer);\n\n    return () => {\n      socket.off(ACTIONS.ADD_PEER, handleNewPeer);\n    };\n  }, [addNewClient]);\n\n  useEffect(() => {\n    async function setRemoteMedia({\n      peerID,\n      sessionDescription: remoteDescription,\n    }) {\n      const peerConnection = peerConnections.current[peerID];\n      if (!peerConnection) return;\n\n      await peerConnection.setRemoteDescription(\n        new RTCSessionDescription(remoteDescription)\n      );\n\n      if (remoteDescription.type === 'offer') {\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n\n        socket.emit(ACTIONS.RELAY_SDP, {\n          peerID,\n          sessionDescription: answer,\n        });\n      }\n    }\n\n    socket.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n\n    return () => {\n      socket.off(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleIceCandidate = ({ peerID, iceCandidate }) => {\n      const peerConnection = peerConnections.current[peerID];\n      if (peerConnection) {\n        peerConnection.addIceCandidate(new RTCIceCandidate(iceCandidate));\n      }\n    };\n\n    socket.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\n\n    return () => {\n      socket.off(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleRemovePeer = ({ peerID }) => {\n      const peerConnection = peerConnections.current[peerID];\n      if (peerConnection) {\n        peerConnection.close();\n      }\n\n      delete peerConnections.current[peerID];\n      delete peerMediaElements.current[peerID];\n\n      updateClients(list => list.filter(c => c !== peerID));\n    };\n\n    socket.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n\n    return () => {\n      socket.off(ACTIONS.REMOVE_PEER, handleRemovePeer);\n    };\n  }, [updateClients]);\n\n  useEffect(() => {\n    async function startCapture() {\n      try {\n        localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: {\n            width: 1280,\n            height: 720,\n          },\n        });\n\n        addNewClient(LOCAL_VIDEO, () => {\n          const localVideoElement = peerMediaElements.current[LOCAL_VIDEO];\n          if (localVideoElement) {\n            localVideoElement.volume = 0;\n            localVideoElement.srcObject = localMediaStream.current;\n          }\n        });\n\n        socket.emit(ACTIONS.JOIN, { room: roomID });\n      } catch (error) {\n        console.error('Error getting userMedia:', error);\n      }\n    }\n\n    startCapture();\n\n    return () => {\n      if (localMediaStream.current) {\n        localMediaStream.current.getTracks().forEach(track => track.stop());\n      }\n\n      socket.emit(ACTIONS.LEAVE);\n    };\n  }, [addNewClient, roomID]);\n\n  useEffect(() => {\n    socket.on(ACTIONS.TOGGLE_MICRO, client => {\n      updateClients(list => {\n        return list.map(item => {\n          if (item.clientId === client.peerID) {\n            return {\n              ...item,\n              isMicroEnabled: client.isMicroEnabled,\n            };\n          }\n\n          return {\n            ...item,\n          };\n        });\n      });\n    });\n\n    socket.on(ACTIONS.TOGGLE_CAMERA, client => {\n      updateClients(list => {\n        return list.map(item => {\n          if (item.clientId === client.peerID) {\n            return {\n              ...item,\n              isCameraEnabled: client.isCameraEnabled,\n            };\n          }\n\n          return {\n            ...item,\n          };\n        });\n      });\n    });\n  }, [updateClients]);\n\n  const provideMediaRef = useCallback((id, node) => {\n    peerMediaElements.current[id] = node;\n  }, []);\n\n  return {\n    clients,\n    provideMediaRef,\n    toggleCamera,\n    toggleMicrophone,\n    isLocalCameraEnabled,\n    isLocalMicrophoneEnabled,\n  };\n}\n","import styled from 'styled-components';\n\nexport const PageContainer = styled.div`\n  display: flex;\n  height: 100vh;\n`;\n\nexport const VideochatContainer = styled.div`\n  background-color: darkslateblue;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-basis: 80%;\n  padding: 36px;\n  gap: 16px;\n  max-width: 80%;\n`;\n\nexport const MainVideo = styled.div`\n  position: relative;\n  background-color: black;\n  width: 100%;\n  height: 100%;\n  flex-basis: 70%;\n  max-height: 70%;\n`;\n\nexport const UsersVideosContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  overflow-x: auto;\n  flex-basis: 30%;\n  max-width: 100%;\n`;\n\nexport const UserVideo = styled.div`\n  width: 250px;\n  height: 100%;\n  display: flex;\n  flex-shrink: 0;\n  background-color: black;\n  position: relative;\n`;\n\nexport const ChatContainer = styled.div`\n  background-color: beige;\n  display: flex;\n  flex-basis: 20%;\n  flex-shrink: 0;\n`;\n\nexport const ButtonsContainer = styled.div`\n  background-color: transparent;\n  display: flex;\n  gap: 8px;\n  position: absolute;\n  bottom: 16px;\n  right: 16px;\n  padding: 8px;\n`;\n\nexport const MediaButtonContainer = styled.div`\n  display: flex;\n  border-radius: 16px;\n  padding: 8px;\n  background-color: rgba(0, 0, 0, 0.6);\n  border: 1px solid gray;\n`;\n\nexport const MediaButton = styled.button`\n  background-color: transparent;\n  color: white;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const MediaSelector = styled.select`\n  background-color: transparent;\n  color: white;\n  cursor: pointer;\n  padding: 8px;\n  max-width: 20px;\n  border: none;\n  outline: none;\n  border-left: 1px solid gray;\n`;\n\nexport const MediaOption = styled.option`\n  background-color: rgba(0, 0, 0, 0.7);\n`;\n\nexport const DisabledMicroIcon = styled.div`\n  color: red;\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useWebRTC, { LOCAL_VIDEO } from './utils/hooks/useWebRTC';\nimport {\n  ButtonsContainer,\n  ChatContainer,\n  DisabledMicroIcon,\n  MainVideo,\n  MediaButton,\n  MediaButtonContainer,\n  MediaOption,\n  MediaSelector,\n  PageContainer,\n  UsersVideosContainer,\n  UserVideo,\n  VideochatContainer,\n} from './Videochat.styled';\n\nfunction VideochatRoom() {\n  const { id: roomID } = useParams();\n  // const location = useLocation();\n  const {\n    clients,\n    provideMediaRef,\n    toggleCamera,\n    toggleMicrophone,\n    isLocalCameraEnabled,\n    isLocalMicrophoneEnabled,\n  } = useWebRTC(roomID);\n  const [allDevices, setAllDevices] = useState([]);\n  const [videoDevices, setVideoDevices] = useState([]);\n  const [audioDevices, setAudioDevices] = useState([]);\n  // const [selectedVideoDevice, setSelectedVideoDevice] = useState(null);\n  // const [selectedAudioDevice, setSelectedAudioDevice] = useState(null);\n  // const queryParams = new URLSearchParams(location.search);\n\n  useEffect(() => {\n    getAllDevices();\n  }, []);\n\n  useEffect(() => {\n    const video = allDevices.filter(device => device.kind === 'videoinput');\n    const audio = allDevices.filter(device => device.kind === 'audioinput');\n    setVideoDevices(video);\n    setAudioDevices(audio);\n  }, [allDevices]);\n\n  const getAllDevices = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    setAllDevices(devices);\n  };\n\n  return (\n    <PageContainer>\n      <VideochatContainer>\n        <UsersVideosContainer>\n          {clients\n            .filter(({ role }) => role !== 'admin')\n            .map(({ clientId, isMicroEnabled, isCameraEnabled }) => {\n              return (\n                <UserVideo key={clientId} id={clientId}>\n                  <video\n                    width=\"100%\"\n                    height=\"100%\"\n                    ref={instance => {\n                      provideMediaRef(clientId, instance);\n                    }}\n                    autoPlay\n                    playsInline\n                    muted={clientId === LOCAL_VIDEO}\n                  />\n                  {!isCameraEnabled && (\n                    <DisabledMicroIcon>Camera Disabled</DisabledMicroIcon>\n                  )}\n                  {!isMicroEnabled && (\n                    <DisabledMicroIcon>Micro Disabled</DisabledMicroIcon>\n                  )}\n                </UserVideo>\n              );\n            })}\n          <UserVideo />\n          <UserVideo />\n          <UserVideo />\n          <UserVideo />\n          <UserVideo />\n          <UserVideo />\n          <UserVideo />\n        </UsersVideosContainer>\n        {clients\n          .filter(({ role }) => role === 'admin')\n          .map(({ clientId }) => {\n            return (\n              <MainVideo key={clientId} id={clientId}>\n                <video\n                  width=\"100%\"\n                  height=\"100%\"\n                  ref={instance => {\n                    provideMediaRef(clientId, instance);\n                  }}\n                  autoPlay\n                  playsInline\n                  muted={clientId === LOCAL_VIDEO}\n                />\n                {!isLocalCameraEnabled && (\n                  <DisabledMicroIcon>Camera Disabled</DisabledMicroIcon>\n                )}\n                {!isLocalMicrophoneEnabled && (\n                  <DisabledMicroIcon>Micro Disabled</DisabledMicroIcon>\n                )}\n              </MainVideo>\n            );\n          })}\n        <ButtonsContainer>\n          <MediaButtonContainer>\n            <MediaButton onClick={toggleMicrophone}>Micro</MediaButton>\n            <MediaSelector name=\"micro\" id=\"micro\">\n              {audioDevices.map(device => (\n                <MediaOption key={device.deviceId} value={device.deviceId}>\n                  {device.label}\n                </MediaOption>\n              ))}\n            </MediaSelector>\n          </MediaButtonContainer>\n          <MediaButtonContainer>\n            <MediaButton onClick={toggleCamera}>Camera</MediaButton>\n            <MediaSelector name=\"camera\" id=\"camera\">\n              {videoDevices.map(device => (\n                <MediaOption key={device.deviceId} value={device.deviceId}>\n                  {device.label}\n                </MediaOption>\n              ))}\n            </MediaSelector>\n          </MediaButtonContainer>\n        </ButtonsContainer>\n      </VideochatContainer>\n      <ChatContainer>TODO: text chat</ChatContainer>\n    </PageContainer>\n  );\n}\n\nexport default VideochatRoom;\n","const ACTIONS = {\n  JOIN: 'join',\n  LEAVE: 'leave',\n  SHARE_ROOMS: 'share-rooms',\n  ADD_PEER: 'add-peer',\n  REMOVE_PEER: 'remove-peer',\n  RELAY_SDP: 'relay-sdp',\n  RELAY_ICE: 'relay-ice',\n  ICE_CANDIDATE: 'ice-candidate',\n  SESSION_DESCRIPTION: 'session-description',\n  TOGGLE_MICRO: 'toggle-micro',\n  TOGGLE_CAMERA: 'toggle-camera',\n};\n\nexport default ACTIONS;\n","import {io} from 'socket.io-client';\n\nconst options = {\n  \"force new connection\": true,\n  reconnectionAttempts: \"Infinity\",\n  timeout : 10000, \n  transports : [\"websocket\"]\n}\n\nconst socket = io(`wss://ap-server-8qi1.onrender.com`, options);\n\nexport default socket;\n","/* jshint node: true */\n'use strict';\n\nvar normalice = require('normalice');\n\n/**\n  # freeice\n\n  The `freeice` module is a simple way of getting random STUN or TURN server\n  for your WebRTC application.  The list of servers (just STUN at this stage)\n  were sourced from this [gist](https://gist.github.com/zziuni/3741933).\n\n  ## Example Use\n\n  The following demonstrates how you can use `freeice` with\n  [rtc-quickconnect](https://github.com/rtc-io/rtc-quickconnect):\n\n  <<< examples/quickconnect.js\n\n  As the `freeice` module generates ice servers in a list compliant with the\n  WebRTC spec you will be able to use it with raw `RTCPeerConnection`\n  constructors and other WebRTC libraries.\n\n  ## Hey, don't use my STUN/TURN server!\n\n  If for some reason your free STUN or TURN server ends up in the\n  list of servers ([stun](https://github.com/DamonOehlman/freeice/blob/master/stun.json) or\n  [turn](https://github.com/DamonOehlman/freeice/blob/master/turn.json))\n  that is used in this module, you can feel\n  free to open an issue on this repository and those servers will be removed\n  within 24 hours (or sooner).  This is the quickest and probably the most\n  polite way to have something removed (and provides us some visibility\n  if someone opens a pull request requesting that a server is added).\n\n  ## Please add my server!\n\n  If you have a server that you wish to add to the list, that's awesome! I'm\n  sure I speak on behalf of a whole pile of WebRTC developers who say thanks.\n  To get it into the list, feel free to either open a pull request or if you\n  find that process a bit daunting then just create an issue requesting\n  the addition of the server (make sure you provide all the details, and if\n  you have a Terms of Service then including that in the PR/issue would be\n  awesome).\n\n  ## I know of a free server, can I add it?\n\n  Sure, if you do your homework and make sure it is ok to use (I'm currently\n  in the process of reviewing the terms of those STUN servers included from\n  the original list).  If it's ok to go, then please see the previous entry\n  for how to add it.\n\n  ## Current List of Servers\n\n  * current as at the time of last `README.md` file generation\n\n  ### STUN\n\n  <<< stun.json\n\n  ### TURN\n\n  <<< turn.json\n\n**/\n\nvar freeice = function(opts) {\n  // if a list of servers has been provided, then use it instead of defaults\n  var servers = {\n    stun: (opts || {}).stun || require('./stun.json'),\n    turn: (opts || {}).turn || require('./turn.json')\n  };\n\n  var stunCount = (opts || {}).stunCount || 2;\n  var turnCount = (opts || {}).turnCount || 0;\n  var selected;\n\n  function getServers(type, count) {\n    var out = [];\n    var input = [].concat(servers[type]);\n    var idx;\n\n    while (input.length && out.length < count) {\n      idx = (Math.random() * input.length) | 0;\n      out = out.concat(input.splice(idx, 1));\n    }\n\n    return out.map(function(url) {\n        //If it's a not a string, don't try to \"normalice\" it otherwise using type:url will screw it up\n        if ((typeof url !== 'string') && (! (url instanceof String))) {\n            return url;\n        } else {\n            return normalice(type + ':' + url);\n        }\n    });\n  }\n\n  // add stun servers\n  selected = [].concat(getServers('stun', stunCount));\n\n  if (turnCount) {\n    selected = selected.concat(getServers('turn', turnCount));\n  }\n\n  return selected;\n};\n\nmodule.exports = freeice;","/**\n  # normalice\n\n  Normalize an ice server configuration object (or plain old string) into a format\n  that is usable in all browsers supporting WebRTC.  Primarily this module is designed\n  to help with the transition of the `url` attribute of the configuration object to\n  the `urls` attribute.\n\n  ## Example Usage\n\n  <<< examples/simple.js\n\n**/\n\nvar protocols = [\n  'stun:',\n  'turn:'\n];\n\nmodule.exports = function(input) {\n  var url = (input || {}).url || input;\n  var protocol;\n  var parts;\n  var output = {};\n\n  // if we don't have a string url, then allow the input to passthrough\n  if (typeof url != 'string' && (! (url instanceof String))) {\n    return input;\n  }\n\n  // trim the url string, and convert to an array\n  url = url.trim();\n\n  // if the protocol is not known, then passthrough\n  protocol = protocols[protocols.indexOf(url.slice(0, 5))];\n  if (! protocol) {\n    return input;\n  }\n\n  // now let's attack the remaining url parts\n  url = url.slice(5);\n  parts = url.split('@');\n\n  output.username = input.username;\n  output.credential = input.credential;\n  // if we have an authentication part, then set the credentials\n  if (parts.length > 1) {\n    url = parts[1];\n    parts = parts[0].split(':');\n\n    // add the output credential and username\n    output.username = parts[0];\n    output.credential = (input || {}).credential || parts[1] || '';\n  }\n\n  output.url = protocol + url;\n  output.urls = [ output.url ];\n\n  return output;\n};\n"],"names":["initialState","state","setState","useState","cbRef","useRef","updateState","useCallback","newState","cb","current","prev","useEffect","LOCAL_VIDEO","PageContainer","styled","_templateObject","_taggedTemplateLiteral","VideochatContainer","_templateObject2","MainVideo","_templateObject3","UsersVideosContainer","_templateObject4","UserVideo","_templateObject5","ChatContainer","_templateObject6","ButtonsContainer","_templateObject7","MediaButtonContainer","_templateObject8","MediaButton","_templateObject9","MediaSelector","_templateObject10","MediaOption","_templateObject11","DisabledMicroIcon","_templateObject12","id","roomID","useParams","clients","provideMediaRef","toggleCamera","toggleMicrophone","isLocalCameraEnabled","isLocalMicrophoneEnabled","updateClients","useStateWithCallback","setLocalCameraEnabled","setLocalMicrophoneEnabled","determineRole","newClient","addNewClient","list","some","client","clientId","role","isMicroEnabled","isCameraEnabled","peerConnections","localMediaStream","peerMediaElements","async","handleNewPeer","_ref3","peerID","createOffer","console","warn","concat","peerConnection","RTCPeerConnection","iceServers","freeice","onicecandidate","event","candidate","socket","ACTIONS","iceCandidate","tracksNumber","ontrack","_ref4","streams","remoteStream","srcObject","getTracks","forEach","track","addTrack","offer","setLocalDescription","sessionDescription","setRemoteMedia","_ref5","remoteDescription","setRemoteDescription","RTCSessionDescription","type","answer","createAnswer","handleIceCandidate","_ref6","addIceCandidate","RTCIceCandidate","handleRemovePeer","_ref7","close","filter","c","navigator","mediaDevices","getUserMedia","audio","video","width","height","localVideoElement","volume","room","error","startCapture","stop","map","item","node","videoTrack","find","kind","enabled","Object","entries","_ref","targetObj","getSenders","sender","audioTrack","_ref2","useWebRTC","allDevices","setAllDevices","videoDevices","setVideoDevices","audioDevices","setAudioDevices","getAllDevices","device","devices","enumerateDevices","_jsxs","children","_jsx","ref","instance","autoPlay","playsInline","muted","onClick","name","value","deviceId","label","JOIN","LEAVE","SHARE_ROOMS","ADD_PEER","REMOVE_PEER","RELAY_SDP","RELAY_ICE","ICE_CANDIDATE","SESSION_DESCRIPTION","TOGGLE_MICRO","TOGGLE_CAMERA","io","reconnectionAttempts","timeout","transports","normalice","require","module","exports","opts","selected","servers","stun","turn","stunCount","turnCount","getServers","count","idx","out","input","length","Math","random","splice","url","String","protocols","protocol","parts","output","trim","indexOf","slice","split","username","credential","urls"],"sourceRoot":""}