{"version":3,"file":"static/js/Speaking Rating Admin page.302b29ee.chunk.js","mappings":"gNAeA,MA+FA,EA/FyBA,KACvB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,IAE7BG,EAAmBC,IACvB,GAAIA,EAAY,CACd,MAAMC,EAAYD,EAAWE,MAAM,KACnC,OAAOD,EAAUE,OAAS,EACtBC,KAAKC,MAAM,CAACJ,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAAIK,KAAK,MAC3DF,KAAKC,MAAML,EACjB,CACM,EAsBR,OAnBAO,EAAAA,EAAAA,YAAU,KACRC,SAASC,MAAK,kCACkBC,WAC9B,IACEf,GAAaD,IAA0B,IACvC,MAAMiB,QAAmBC,EAAAA,EAAAA,IAAU,yBACnCC,QAAQC,IAAI,GAAIH,GAEhBb,GAASD,GAAkB,IAAIc,EAAWI,QAC1CF,QAAQC,IAAI,MAKd,CAJE,MAAOE,GACPH,QAAQC,IAAIE,EACd,CAAC,QACCrB,GAAaD,IAA0B,GACzC,GAEFuB,EAAyB,GACxB,KAGDC,EAAAA,EAAAA,MAACC,EAAAA,GAAwB,CAAAC,SAAA,EACvBF,EAAAA,EAAAA,MAACG,EAAAA,GAAsB,CAAAD,SAAA,EACrBE,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CAAAH,SAAC,iNACfE,EAAAA,EAAAA,KAAA,SAAAF,UACEF,EAAAA,EAAAA,MAACM,EAAAA,GAAS,CAAAJ,SAAA,EACRE,EAAAA,EAAAA,KAACG,EAAAA,GAAY,CAAAL,SAAC,YACdE,EAAAA,EAAAA,KAACG,EAAAA,GAAY,CAAAL,SAAC,yBACdE,EAAAA,EAAAA,KAACG,EAAAA,GAAY,CAAAL,SAAC,4DACdE,EAAAA,EAAAA,KAACG,EAAAA,GAAY,CAAAL,SAAC,8BACdE,EAAAA,EAAAA,KAACG,EAAAA,GAAY,CAAAL,SAAC,yCAGlBE,EAAAA,EAAAA,KAAA,SAAAF,SACGvB,EACE6B,QACCC,GACE,IAAIvB,KACF,IAAIA,KACFL,EACE4B,EAAKC,YAAYD,EAAKC,YAAYzB,OAAS,MAG/C,QACY,YAAdwB,EAAKE,OACJF,EAAKE,KAAKC,SAAS,WAEvBC,MACC,CAACC,EAAGC,IACF,IAAI7B,KACFL,EAAiBkC,EAAEL,YAAYK,EAAEL,YAAYzB,OAAS,KAExD,IAAIC,KACFL,EAAiBiC,EAAEJ,YAAYI,EAAEJ,YAAYzB,OAAS,OAG3D+B,KAAI,CAACP,EAAMQ,KACVjB,EAAAA,EAAAA,MAACM,EAAAA,GAAS,CAAAJ,SAAA,EACRE,EAAAA,EAAAA,KAACc,EAAAA,GAAQ,CAAAhB,SAAEe,EAAI,KACfb,EAAAA,EAAAA,KAACe,EAAAA,GAAY,CAAAjB,SAAEO,EAAKE,QACpBP,EAAAA,EAAAA,KAACc,EAAAA,GAAQ,CAAAhB,SACLO,EAAKC,YAAYD,EAAKC,YAAYzB,OAAS,IAEzCwB,EAAKC,YAAYD,EAAKC,YAAYzB,OAAS,GAAGmC,MAC5C,QAEF,IAAIlC,KACFuB,EAAKC,YAAYD,EAAKC,YAAYzB,OAAS,IAC3CoC,eAAe,SANjB,MASNjB,EAAAA,EAAAA,KAACc,EAAAA,GAAQ,CAAAhB,SAAEO,EAAKa,QAChBlB,EAAAA,EAAAA,KAACc,EAAAA,GAAQ,CAAAhB,SAAEO,EAAKc,WAfFd,EAAKe,YAoB5BhD,IAAa4B,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,MACI,C","sources":["pages/Streams/SpeakingsRatings.jsx"],"sourcesContent":["import axios from 'axios';\nimport { Loader } from 'components/SharedLayout/Loaders/Loader';\nimport {\n  UserCell,\n  UserCellLeft,\n  UserDBCaption,\n  UserDBRow,\n  UserHeadCell,\n} from 'pages/Streams/UserAdminPanel/UserAdminPanel.styled';\nimport {\n  TeacherSpeakingDBSection,\n  TeacherSpeakingDBTable,\n} from 'pages/TeacherPage/TeacherPage.styled';\nimport { useEffect, useState } from 'react';\n\nconst SpeakingsRatings = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [users, setUsers] = useState([]);\n\n  const changeDateFormat = dateString => {\n    if (dateString) {\n      const dateArray = dateString.split('.');\n      return dateArray.length > 2\n        ? Date.parse([dateArray[1], dateArray[0], dateArray[2]].join('/'))\n        : Date.parse(dateString);\n    }\n    return;\n  };\n\n  useEffect(() => {\n    document.title = `Speaking Visited | AP Education`;\n    const getSpeakingUsersRequest = async () => {\n      try {\n        setIsLoading(isLoading => (isLoading = true));\n        const usersToSet = await axios.get('/speakingusers/rating');\n        console.log(47, usersToSet);\n\n        setUsers(users => (users = [...usersToSet.data]));\n        console.log('eff');\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(isLoading => (isLoading = false));\n      }\n    };\n    getSpeakingUsersRequest();\n  }, []);\n\n  return (\n    <TeacherSpeakingDBSection>\n      <TeacherSpeakingDBTable>\n        <UserDBCaption>Список студентів, що відвідали заняття</UserDBCaption>\n        <thead>\n          <UserDBRow>\n            <UserHeadCell>№</UserHeadCell>\n            <UserHeadCell>Ім'я</UserHeadCell>\n            <UserHeadCell>Відвідини</UserHeadCell>\n            <UserHeadCell>Мова</UserHeadCell>\n            <UserHeadCell>Потік</UserHeadCell>\n          </UserDBRow>\n        </thead>\n        <tbody>\n          {users\n            .filter(\n              user =>\n                new Date() -\n                  new Date(\n                    changeDateFormat(\n                      user.visitedTime[user.visitedTime.length - 1]\n                    )\n                  ) <=\n                  4 * 86400000 &&\n                user.name !== 'Dev Acc' &&\n                !user.name.includes('Guest')\n            )\n            .sort(\n              (a, b) =>\n                new Date(\n                  changeDateFormat(b.visitedTime[b.visitedTime.length - 1])\n                ) -\n                new Date(\n                  changeDateFormat(a.visitedTime[a.visitedTime.length - 1])\n                )\n            )\n            .map((user, i) => (\n              <UserDBRow key={user._id}>\n                <UserCell>{i + 1}</UserCell>\n                <UserCellLeft>{user.name}</UserCellLeft>\n                <UserCell>\n                  {!user.visitedTime[user.visitedTime.length - 1]\n                    ? ''\n                    : user.visitedTime[user.visitedTime.length - 1].match(\n                        '^202'\n                      )\n                    ? new Date(\n                        user.visitedTime[user.visitedTime.length - 1]\n                      ).toLocaleString('uk-UA')\n                    : ''}\n                </UserCell>\n                <UserCell>{user.lang}</UserCell>\n                <UserCell>{user.course}</UserCell>\n              </UserDBRow>\n            ))}\n        </tbody>\n      </TeacherSpeakingDBTable>\n      {isLoading && <Loader />}\n    </TeacherSpeakingDBSection>\n  );\n};\n\nexport default SpeakingsRatings;\n"],"names":["SpeakingsRatings","isLoading","setIsLoading","useState","users","setUsers","changeDateFormat","dateString","dateArray","split","length","Date","parse","join","useEffect","document","title","async","usersToSet","axios","console","log","data","error","getSpeakingUsersRequest","_jsxs","TeacherSpeakingDBSection","children","TeacherSpeakingDBTable","_jsx","UserDBCaption","UserDBRow","UserHeadCell","filter","user","visitedTime","name","includes","sort","a","b","map","i","UserCell","UserCellLeft","match","toLocaleString","lang","course","_id","Loader"],"sourceRoot":""}