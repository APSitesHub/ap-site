{"version":3,"file":"static/js/AP Conference Education page.f5712735.chunk.js","mappings":"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","sources":["pages/Streams/APConf/APConf.jsx"],"sourcesContent":["import useSize from '@react-hook/size';\nimport axios from 'axios';\nimport { Kahoots } from 'components/Stream/Kahoots/Kahoots';\nimport { useEffect, useRef, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { useOutletContext } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { Chat } from 'utils/Chat/Chat';\nimport {\n  BoxHideLeftSwitch,\n  BoxHideRightSwitch,\n  BoxHideSwitch,\n  ButtonBox,\n  ChatBox,\n  KahootBtn,\n  KahootLogo,\n  StreamPlaceHolder,\n  StreamPlaceHolderText,\n  StreamSection,\n  VideoBox\n} from '../../../components/Stream/Stream.styled';\n\nconst ApConf = () => {\n  // eslint-disable-next-line\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [isKahootOpen, setIsKahootOpen] = useState(false);\n  // eslint-disable-next-line\n  const [isSupportOpen, setIsSupportOpen] = useState(false);\n  const [isButtonBoxOpen, setIsButtonBoxOpen] = useState(true);\n  const [isOpenedLast, setIsOpenedLast] = useState('');\n  // eslint-disable-next-line\n  const [isAnimated, setIsAnimated] = useState(false);\n  // eslint-disable-next-line\n  const [animatedID, setAnimationID] = useState('');\n  const [links, isLoading, currentUser, room] = useOutletContext();\n  const chatEl = useRef();\n  // eslint-disable-next-line\n  const [chatWidth, chatHeight] = useSize(chatEl);\n  const [width, height] = useSize(document.body);\n  const [messages, setMessages] = useState([]);\n\n  const toggleKahoot = e => {\n    setIsKahootOpen(isKahootOpen => !isKahootOpen);\n    isChatOpen || isSupportOpen\n      ? setIsOpenedLast(isOpenedLast => 'kahoot')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const toggleButtonBox = () => {\n    setIsButtonBoxOpen(isOpen => !isOpen);\n  };\n\n  // const toggleChat = () => {\n  //   setIsChatOpen(isChatOpen => !isChatOpen);\n  //   isKahootOpen || isSupportOpen\n  //     ? setIsOpenedLast(isOpenedLast => 'chat')\n  //     : setIsOpenedLast(isOpenedLast => '');\n  // };\n  // const toggleSupport = () => {\n  //   setIsSupportOpen(isSupportOpen => !isSupportOpen);\n  //   setAnimationID('');\n  //   isKahootOpen || isChatOpen\n  //     ? setIsOpenedLast(isOpenedLast => 'support')\n  //     : setIsOpenedLast(isOpenedLast => '');\n  // };\n  \n  // const handleSupportClick = data_id => {\n  //   setAnimationID(id => (id = data_id));\n  //   if (!isAnimated) {\n  //     setIsAnimated(isAnimated => !isAnimated);\n  //   }\n  // };\n\n  const videoBoxWidth =\n    chatWidth === 0 && width > height ? width - 300 : width - chatWidth;\n\n  const socketRef = useRef(null);\n\n  useEffect(() => {\n    document.title = 'AP Conference | AP Education';\n\n    socketRef.current = io('https://ap-chat-server.onrender.com/');\n\n    socketRef.current.on('connected', (connected, handshake) => {\n      console.log(connected);\n      console.log(handshake.time);\n    });\n\n    const getMessages = async () => {\n      console.log('get');\n      try {\n        const dbMessages = await axios.get(\n          `https://ap-chat-server.onrender.com/messages/room`,\n          {\n            params: {\n              room,\n            },\n          }\n        );\n        const todayMessages = dbMessages.data.filter(\n          message =>\n            new Date(message.createdAt).getDate() === new Date().getDate()\n        );\n        setMessages(messages => (messages = todayMessages));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMessages();\n\n    socketRef.current.on('message', async data => {\n      setMessages(messages => (messages = [...messages, data]));\n      const updateMessages = async () => {\n        try {\n          await axios.post(\n            'https://ap-chat-server.onrender.com/messages',\n            data\n          );\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      await updateMessages();\n    });\n\n    socketRef.current.on('message:get', async data => {\n      setMessages(messages => (messages = [...messages, data]));\n    });\n\n    socketRef.current.on('message:pinned', async (id, data) => {\n      console.log(id);\n      console.log(data);\n      setMessages(messages => {\n        messages[messages.findIndex(message => message.id === id)].isPinned =\n          data.isPinned;\n        return [...messages];\n      });\n    });\n\n    socketRef.current.on('message:delete', async id => {\n      console.log('delete fired');\n      setMessages(\n        messages =>\n          (messages = [...messages.filter(message => message.id !== id)])\n      );\n      const deleteMessage = async () => {\n        try {\n          await axios.delete(\n            `https://ap-chat-server.onrender.com/messages/${id}`\n          );\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      await deleteMessage();\n    });\n\n    socketRef.current.on('message:deleted', async id => {\n      console.log(id);\n      setMessages(\n        messages =>\n          (messages = [...messages.filter(message => message.id !== id)])\n      );\n    });\n\n    return () => {\n      socketRef.current.off('connected');\n      socketRef.current.off('message');\n      socketRef.current.disconnect();\n    };\n  }, [currentUser, room]);\n\n  return (\n    <>\n      {(links.nmt_ukr === undefined || links.nmt_ukr[0] < 10) && !isLoading ? (\n        <StreamPlaceHolder>\n          <StreamPlaceHolderText>\n            Поки що трансляції тут немає! <br />\n            Перевірте, чи правильно ви вказали адресу сторінки або спробуйте\n            пізніше.\n          </StreamPlaceHolderText>\n        </StreamPlaceHolder>\n      ) : (\n        <>\n          <StreamSection\n            style={{\n              width:\n                isChatOpen && width > height ? `${videoBoxWidth}px` : '100%',\n            }}\n          >\n            <VideoBox>\n              <ReactPlayer\n                playing={true}\n                muted={true}\n                controls={true}\n                config={{\n                  youtube: {\n                    playerVars: { rel: 0 },\n                  },\n                }}\n                style={{\n                  display: 'block',\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                }}\n                width=\"100%\"\n                height=\"100vh\"\n                url={links.nmt_ukr}\n              />\n            </VideoBox>\n\n            <ButtonBox className={!isButtonBoxOpen ? 'hidden' : ''}>\n              <KahootBtn\n                onClick={toggleKahoot}\n                className={\n                  isAnimated && animatedID === 'kahoot_open' ? 'animated' : ''\n                }\n              >\n                <KahootLogo />\n              </KahootBtn>\n\n              {/* <ChatBtn\n                onClick={toggleChat}\n                className={\n                  isAnimated && animatedID === 'chat_open' ? 'animated' : ''\n                }\n              >\n                <ChatLogo />\n              </ChatBtn> */}\n            </ButtonBox>\n\n            <BoxHideSwitch id=\"no-transform\" onClick={toggleButtonBox}>\n              {isButtonBoxOpen ? <BoxHideLeftSwitch /> : <BoxHideRightSwitch />}\n            </BoxHideSwitch>\n\n            {height > width && (\n              <ChatBox\n                ref={chatEl}\n                className={isChatOpen ? 'shown' : 'hidden'}\n                style={\n                  isOpenedLast === 'chat' ? { zIndex: '2' } : { zIndex: '1' }\n                }\n              >\n                <Chat\n                  socket={socketRef.current}\n                  messages={messages}\n                  isChatOpen={isChatOpen}\n                  currentUser={currentUser}\n                />\n              </ChatBox>\n            )}\n\n            <Kahoots\n              sectionWidth={width}\n              sectionHeight={height}\n              isKahootOpen={isKahootOpen}\n              isChatOpen={isChatOpen}\n              isOpenedLast={isOpenedLast}\n            />\n          </StreamSection>\n          {width >= height && (\n            <ChatBox\n              ref={chatEl}\n              className={isChatOpen ? 'shown' : 'hidden'}\n              style={\n                isOpenedLast === 'chat' ? { zIndex: '2' } : { zIndex: '1' }\n              }\n            >\n              <Chat\n                socket={socketRef.current}\n                messages={messages}\n                isChatOpen={isChatOpen}\n                currentUser={currentUser}\n              />\n            </ChatBox>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ApConf;\n"],"names":["ApConf","isChatOpen","setIsChatOpen","useState","isKahootOpen","setIsKahootOpen","isSupportOpen","setIsSupportOpen","isButtonBoxOpen","setIsButtonBoxOpen","isOpenedLast","setIsOpenedLast","isAnimated","setIsAnimated","animatedID","setAnimationID","links","isLoading","currentUser","room","useOutletContext","chatEl","useRef","chatWidth","chatHeight","useSize","width","height","document","body","messages","setMessages","videoBoxWidth","socketRef","useEffect","title","current","io","on","connected","handshake","console","log","time","async","todayMessages","axios","params","data","filter","message","Date","createdAt","getDate","error","getMessages","updateMessages","id","findIndex","isPinned","concat","deleteMessage","off","disconnect","_jsx","_Fragment","children","undefined","nmt_ukr","StreamPlaceHolder","_jsxs","StreamPlaceHolderText","StreamSection","style","VideoBox","ReactPlayer","playing","muted","controls","config","youtube","playerVars","rel","display","position","top","left","url","ButtonBox","className","KahootBtn","onClick","e","KahootLogo","BoxHideSwitch","toggleButtonBox","isOpen","BoxHideLeftSwitch","BoxHideRightSwitch","ChatBox","ref","zIndex","Chat","socket","Kahoots","sectionWidth","sectionHeight"],"sourceRoot":""}